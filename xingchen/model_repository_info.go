/*
XingChen 开放接口定义

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xingchen

import (
	"encoding/json"
)

// checks if the RepositoryInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RepositoryInfo{}

// RepositoryInfo 知识库信息
type RepositoryInfo struct {
	// 知识库文件信息
	RepositoryFiles []Repository `json:"repositoryFiles,omitempty"`
	// 知识库同步到向量数据库的状态
	Status               *string `json:"status,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RepositoryInfo RepositoryInfo

// NewRepositoryInfo instantiates a new RepositoryInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryInfo() *RepositoryInfo {
	this := RepositoryInfo{}
	return &this
}

// NewRepositoryInfoWithDefaults instantiates a new RepositoryInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryInfoWithDefaults() *RepositoryInfo {
	this := RepositoryInfo{}
	return &this
}

// GetRepositoryFiles returns the RepositoryFiles field value if set, zero value otherwise.
func (o *RepositoryInfo) GetRepositoryFiles() []Repository {
	if o == nil || IsNil(o.RepositoryFiles) {
		var ret []Repository
		return ret
	}
	return o.RepositoryFiles
}

// GetRepositoryFilesOk returns a tuple with the RepositoryFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryInfo) GetRepositoryFilesOk() ([]Repository, bool) {
	if o == nil || IsNil(o.RepositoryFiles) {
		return nil, false
	}
	return o.RepositoryFiles, true
}

// HasRepositoryFiles returns a boolean if a field has been set.
func (o *RepositoryInfo) HasRepositoryFiles() bool {
	if o != nil && !IsNil(o.RepositoryFiles) {
		return true
	}

	return false
}

// SetRepositoryFiles gets a reference to the given []Repository and assigns it to the RepositoryFiles field.
func (o *RepositoryInfo) SetRepositoryFiles(v []Repository) {
	o.RepositoryFiles = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RepositoryInfo) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryInfo) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RepositoryInfo) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *RepositoryInfo) SetStatus(v string) {
	o.Status = &v
}

func (o RepositoryInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RepositoryInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RepositoryFiles) {
		toSerialize["repositoryFiles"] = o.RepositoryFiles
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RepositoryInfo) UnmarshalJSON(bytes []byte) (err error) {
	varRepositoryInfo := _RepositoryInfo{}

	err = json.Unmarshal(bytes, &varRepositoryInfo)

	if err != nil {
		return err
	}

	*o = RepositoryInfo(varRepositoryInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "repositoryFiles")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRepositoryInfo struct {
	value *RepositoryInfo
	isSet bool
}

func (v NullableRepositoryInfo) Get() *RepositoryInfo {
	return v.value
}

func (v *NullableRepositoryInfo) Set(val *RepositoryInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryInfo(val *RepositoryInfo) *NullableRepositoryInfo {
	return &NullableRepositoryInfo{value: val, isSet: true}
}

func (v NullableRepositoryInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
