/*
XingChen 开放接口定义

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xingchen

import (
	"encoding/json"
)

// checks if the CharacterQueryWhere type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CharacterQueryWhere{}

// CharacterQueryWhere 查询条件
type CharacterQueryWhere struct {
	// 角色名称
	CharacterName *string `json:"characterName,omitempty"`
	// 查询范围：my:我创建的角色, public: 平台开放的角色, pre_configured: 预制角色
	Scope                *string `json:"scope,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CharacterQueryWhere CharacterQueryWhere

// NewCharacterQueryWhere instantiates a new CharacterQueryWhere object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCharacterQueryWhere() *CharacterQueryWhere {
	this := CharacterQueryWhere{}
	return &this
}

// NewCharacterQueryWhereWithDefaults instantiates a new CharacterQueryWhere object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCharacterQueryWhereWithDefaults() *CharacterQueryWhere {
	this := CharacterQueryWhere{}
	return &this
}

// GetCharacterName returns the CharacterName field value if set, zero value otherwise.
func (o *CharacterQueryWhere) GetCharacterName() string {
	if o == nil || IsNil(o.CharacterName) {
		var ret string
		return ret
	}
	return *o.CharacterName
}

// GetCharacterNameOk returns a tuple with the CharacterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterQueryWhere) GetCharacterNameOk() (*string, bool) {
	if o == nil || IsNil(o.CharacterName) {
		return nil, false
	}
	return o.CharacterName, true
}

// HasCharacterName returns a boolean if a field has been set.
func (o *CharacterQueryWhere) HasCharacterName() bool {
	if o != nil && !IsNil(o.CharacterName) {
		return true
	}

	return false
}

// SetCharacterName gets a reference to the given string and assigns it to the CharacterName field.
func (o *CharacterQueryWhere) SetCharacterName(v string) {
	o.CharacterName = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *CharacterQueryWhere) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterQueryWhere) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *CharacterQueryWhere) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *CharacterQueryWhere) SetScope(v string) {
	o.Scope = &v
}

func (o CharacterQueryWhere) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CharacterQueryWhere) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CharacterName) {
		toSerialize["characterName"] = o.CharacterName
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CharacterQueryWhere) UnmarshalJSON(bytes []byte) (err error) {
	varCharacterQueryWhere := _CharacterQueryWhere{}

	err = json.Unmarshal(bytes, &varCharacterQueryWhere)

	if err != nil {
		return err
	}

	*o = CharacterQueryWhere(varCharacterQueryWhere)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "characterName")
		delete(additionalProperties, "scope")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCharacterQueryWhere struct {
	value *CharacterQueryWhere
	isSet bool
}

func (v NullableCharacterQueryWhere) Get() *CharacterQueryWhere {
	return v.value
}

func (v *NullableCharacterQueryWhere) Set(val *CharacterQueryWhere) {
	v.value = val
	v.isSet = true
}

func (v NullableCharacterQueryWhere) IsSet() bool {
	return v.isSet
}

func (v *NullableCharacterQueryWhere) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCharacterQueryWhere(val *CharacterQueryWhere) *NullableCharacterQueryWhere {
	return &NullableCharacterQueryWhere{value: val, isSet: true}
}

func (v NullableCharacterQueryWhere) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCharacterQueryWhere) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
