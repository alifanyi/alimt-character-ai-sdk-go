/*
XingChen 开放接口定义

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xingchen

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// ChatApiSubService ChatApiSub service
type ChatApiSubService service

type ApiChatRequest struct {
	ctx            context.Context
	ApiService     *ChatApiSubService
	chatReqParams  *ChatReqParams
	dataInspection *bool
}

// 对话请求
func (r ApiChatRequest) ChatReqParams(chatReqParams ChatReqParams) ApiChatRequest {
	r.chatReqParams = &chatReqParams
	return r
}

func (r ApiChatRequest) DataInspection(dataInspection *bool) ApiChatRequest {
	r.dataInspection = dataInspection
	return r
}

func (r ApiChatRequest) Execute() (*ResultDTOChatResultDTO, *http.Response, error) {
	return r.ApiService.ChatExecute(r)
}

func (r ApiChatRequest) StreamExecute() (*ChatResultStream, error) {
	return r.ApiService.ChatStreamExecute(r)
}

/*
Chat 用户对话

	发起角色对话：


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiChatRequest
*/
func (a *ChatApiSubService) Chat(ctx context.Context) ApiChatRequest {
	return ApiChatRequest{
		ApiService:     a,
		ctx:            ctx,
		dataInspection: PtrBool(false),
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *ChatApiSubService) ChatExecute(r ApiChatRequest) (*ResultDTOChatResultDTO, *http.Response, error) {
	var (
		localVarReturnValue *ResultDTOChatResultDTO
	)

	localVarHTTPResponse, err := a.call(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

func (a *ChatApiSubService) ChatStreamExecute(r ApiChatRequest) (*ChatResultStream, error) {
	localVarHTTPResponse, err := a.call(r)
	if err != nil {
		return nil, err
	}
	chatResultStream := NewChatResultStream(localVarHTTPResponse)
	return chatResultStream, nil
}

func (a *ChatApiSubService) call(r ApiChatRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatApiSubService.Chat")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/chat/send"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.chatReqParams == nil {
		return nil, reportError("chatReqParams is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/event-stream"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.chatReqParams.Streaming != nil && *r.chatReqParams.Streaming {
		localVarHeaderParams["X-AcA-SSE"] = "enable"
	}
	if *r.dataInspection {
		localVarHeaderParams["X-AcA-DataInspection"] = "enable"
	}

	// body params
	if a.client.cfg.Version == V1 {
		localVarPostBody = r.chatReqParams
	} else {
		localVarPostBody = chatReqParamsTOBaseChatRequest(r.chatReqParams)
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)

	return localVarHTTPResponse, err
}

type ApiStopChatRequest struct {
	ctx             context.Context
	ApiService      *ChatApiSubService
	stopChatRequest *StopChatRequest
}

func (r ApiStopChatRequest) StopChatRequest(stopChatRequest StopChatRequest) ApiStopChatRequest {
	r.stopChatRequest = &stopChatRequest
	return r
}

func (r ApiStopChatRequest) Execute() (*ResultDTOBoolean, *http.Response, error) {
	return r.ApiService.StopChatExecute(r)
}

func (a *ChatApiSubService) StopChat(ctx context.Context) ApiStopChatRequest {
	return ApiStopChatRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

func (a *ChatApiSubService) StopChatExecute(r ApiStopChatRequest) (*ResultDTOBoolean, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResultDTOBoolean
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatApiSubService.StopChat")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/chat/stop"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.StopChatRequest == nil {
		return localVarReturnValue, nil, reportError("StopChatRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	localVarPostBody = r.stopChatRequest

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
