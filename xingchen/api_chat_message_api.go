/*
XingChen 开放接口定义

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xingchen

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// ChatMessageApiSubService ChatMessageApiSub service
type ChatMessageApiSubService service

type ApiChatHistoriesRequest struct {
	ctx                 context.Context
	ApiService          *ChatMessageApiSubService
	chatHistoryQueryDTO *ChatHistoryQueryDTO
}

// 对话请求
func (r ApiChatHistoriesRequest) ChatHistoryQueryDTO(chatHistoryQueryDTO ChatHistoryQueryDTO) ApiChatHistoriesRequest {
	r.chatHistoryQueryDTO = &chatHistoryQueryDTO
	return r
}

func (r ApiChatHistoriesRequest) Execute() (*ResultDTOPageResultChatMessageDTO, *http.Response, error) {
	return r.ApiService.ChatHistoriesExecute(r)
}

/*
ChatHistories 对话历史

	当前用户与角色的对话历史查询：

- where: 查询条件：必传
  - characterId: 必传
  - startTime：开始时间戳，选传
  - endTime: 结束时间戳，选传
  - sessionId: 会话ID，宣传

- 排序：必传，默认根据创建时间倒排
- pageSize: 分页大小，选传，默认10
- pageNumber: 分页页码，宣传，默认1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiChatHistoriesRequest
*/
func (a *ChatMessageApiSubService) ChatHistories(ctx context.Context) ApiChatHistoriesRequest {
	return ApiChatHistoriesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ResultDTOPageResultChatMessageDTO
func (a *ChatMessageApiSubService) ChatHistoriesExecute(r ApiChatHistoriesRequest) (*ResultDTOPageResultChatMessageDTO, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResultDTOPageResultChatMessageDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatMessageApiSubService.ChatHistories")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/chat/message/histories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.chatHistoryQueryDTO == nil {
		return localVarReturnValue, nil, reportError("chatHistoryQueryDTO is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.chatHistoryQueryDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRateMessageRequest struct {
	ctx                  context.Context
	ApiService           *ChatMessageApiSubService
	messageRatingRequest *MessageRatingRequest
}

// 对话请求
func (r ApiRateMessageRequest) MessageRatingRequest(messageRatingRequest MessageRatingRequest) ApiRateMessageRequest {
	r.messageRatingRequest = &messageRatingRequest
	return r
}

func (r ApiRateMessageRequest) Execute() (*ResultDTOBoolean, *http.Response, error) {
	return r.ApiService.RateMessageExecute(r)
}

/*
RateMessage 消息评分

	评分请求参数：

- 消息ID：必传
- 评分：必传，整型，[0-5]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiRateMessageRequest
*/
func (a *ChatMessageApiSubService) RateMessage(ctx context.Context) ApiRateMessageRequest {
	return ApiRateMessageRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ResultDTOBoolean
func (a *ChatMessageApiSubService) RateMessageExecute(r ApiRateMessageRequest) (*ResultDTOBoolean, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResultDTOBoolean
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatMessageApiSubService.RateMessage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/chat/rating"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.messageRatingRequest == nil {
		return localVarReturnValue, nil, reportError("messageRatingRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.messageRatingRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSysReminderRequest struct {
	ctx                context.Context
	ApiService         *ChatMessageApiSubService
	sysReminderRequest *SysReminderRequest
}

// 对话请求
func (r ApiSysReminderRequest) SysReminderRequest(sysReminderRequest SysReminderRequest) ApiSysReminderRequest {
	r.sysReminderRequest = &sysReminderRequest
	return r
}

func (r ApiSysReminderRequest) Execute() (*ResultDTOBoolean, *http.Response, error) {
	return r.ApiService.SysReminderExecute(r)
}

/*
SysReminder Method for SysReminder

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSysReminderRequest
*/
func (a *ChatMessageApiSubService) SysReminder(ctx context.Context) ApiSysReminderRequest {
	return ApiSysReminderRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ResultDTOBoolean
func (a *ChatMessageApiSubService) SysReminderExecute(r ApiSysReminderRequest) (*ResultDTOBoolean, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResultDTOBoolean
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatMessageApiSubService.SysReminder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/chat/reminder"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sysReminderRequest == nil {
		return localVarReturnValue, nil, reportError("sysReminderRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.sysReminderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChatResetRequest struct {
	ctx              context.Context
	ApiService       *ChatMessageApiSubService
	chatResetRequest *ChatResetRequest
}

// 对话请求
func (r ApiChatResetRequest) ChatResetRequest(chatResetRequest ChatResetRequest) ApiChatResetRequest {
	r.chatResetRequest = &chatResetRequest
	return r
}

func (r ApiChatResetRequest) Execute() (*ResultDTOBoolean, *http.Response, error) {
	return r.ApiService.ChatResetExecute(r)
}

/*
SysReminder Method for SysReminder

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSysReminderRequest
*/
func (a *ChatMessageApiSubService) ChatReset(ctx context.Context) ApiChatResetRequest {
	return ApiChatResetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ResultDTOBoolean
func (a *ChatMessageApiSubService) ChatResetExecute(r ApiChatResetRequest) (*ResultDTOBoolean, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResultDTOBoolean
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatMessageApiSubService.ChatReset")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/chat/reset"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.chatResetRequest == nil {
		return localVarReturnValue, nil, reportError("chatResetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.chatResetRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPollTextToImageResultRequest struct {
	ctx        context.Context
	ApiService *ChatMessageApiSubService
	messageId  *string
	userId     *string
}

func (r ApiPollTextToImageResultRequest) MessageId(messageId *string) ApiPollTextToImageResultRequest {
	r.messageId = messageId
	return r
}

func (r ApiPollTextToImageResultRequest) UserId(userId *string) ApiPollTextToImageResultRequest {
	r.userId = userId
	return r
}

func (r ApiPollTextToImageResultRequest) Execute() (*ResultDTOPollTextToImageResultDTO, *http.Response, error) {
	return r.ApiService.PollTextToImageResultExecute(r)
}

func (a *ChatMessageApiSubService) PollTextToImageResult(ctx context.Context) ApiPollTextToImageResultRequest {
	return ApiPollTextToImageResultRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

func (a *ChatMessageApiSubService) PollTextToImageResultExecute(r ApiPollTextToImageResultRequest) (*ResultDTOPollTextToImageResultDTO, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResultDTOPollTextToImageResultDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatMessageApiSubService.PollTextToImageResult")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/chat/polling/image"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.messageId == nil {
		return localVarReturnValue, nil, reportError("messageId is required and must be specified")
	}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "messageId", r.messageId, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
