/*
XingChen 开放接口定义

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xingchen

import (
	"encoding/json"
)

// checks if the Meta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Meta{}

// Meta struct for Meta
type Meta struct {
	HasRisk              *bool   `json:"hasRisk,omitempty"`
	SafetyStdAnswer      *string `json:"safetyStdAnswer,omitempty"`
	RewriteContent       *string `json:"rewriteContent,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Meta Meta

// NewMeta instantiates a new Meta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeta() *Meta {
	this := Meta{}
	return &this
}

// NewMetaWithDefaults instantiates a new Meta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaWithDefaults() *Meta {
	this := Meta{}
	return &this
}

// GetHasRisk returns the HasRisk field value if set, zero value otherwise.
func (o *Meta) GetHasRisk() bool {
	if o == nil || IsNil(o.HasRisk) {
		var ret bool
		return ret
	}
	return *o.HasRisk
}

// GetHasRiskOk returns a tuple with the HasRisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Meta) GetHasRiskOk() (*bool, bool) {
	if o == nil || IsNil(o.HasRisk) {
		return nil, false
	}
	return o.HasRisk, true
}

// HasHasRisk returns a boolean if a field has been set.
func (o *Meta) HasHasRisk() bool {
	if o != nil && !IsNil(o.HasRisk) {
		return true
	}

	return false
}

// SetHasRisk gets a reference to the given bool and assigns it to the HasRisk field.
func (o *Meta) SetHasRisk(v bool) {
	o.HasRisk = &v
}

// GetSafetyStdAnswer returns the SafetyStdAnswer field value if set, zero value otherwise.
func (o *Meta) GetSafetyStdAnswer() string {
	if o == nil || IsNil(o.SafetyStdAnswer) {
		var ret string
		return ret
	}
	return *o.SafetyStdAnswer
}

// GetSafetyStdAnswerOk returns a tuple with the SafetyStdAnswer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Meta) GetSafetyStdAnswerOk() (*string, bool) {
	if o == nil || IsNil(o.SafetyStdAnswer) {
		return nil, false
	}
	return o.SafetyStdAnswer, true
}

// HasSafetyStdAnswer returns a boolean if a field has been set.
func (o *Meta) HasSafetyStdAnswer() bool {
	if o != nil && !IsNil(o.SafetyStdAnswer) {
		return true
	}

	return false
}

// SetSafetyStdAnswer gets a reference to the given string and assigns it to the SafetyStdAnswer field.
func (o *Meta) SetSafetyStdAnswer(v string) {
	o.SafetyStdAnswer = &v
}

// GetRewriteContent returns the RewriteContent field value if set, zero value otherwise.
func (o *Meta) GetRewriteContent() string {
	if o == nil || IsNil(o.RewriteContent) {
		var ret string
		return ret
	}
	return *o.RewriteContent
}

// GetRewriteContentOk returns a tuple with the RewriteContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Meta) GetRewriteContentOk() (*string, bool) {
	if o == nil || IsNil(o.RewriteContent) {
		return nil, false
	}
	return o.RewriteContent, true
}

// HasRewriteContent returns a boolean if a field has been set.
func (o *Meta) HasRewriteContent() bool {
	if o != nil && !IsNil(o.RewriteContent) {
		return true
	}

	return false
}

// SetRewriteContent gets a reference to the given string and assigns it to the RewriteContent field.
func (o *Meta) SetRewriteContent(v string) {
	o.RewriteContent = &v
}

func (o Meta) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Meta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HasRisk) {
		toSerialize["hasRisk"] = o.HasRisk
	}
	if !IsNil(o.SafetyStdAnswer) {
		toSerialize["safetyStdAnswer"] = o.SafetyStdAnswer
	}
	if !IsNil(o.RewriteContent) {
		toSerialize["rewriteContent"] = o.RewriteContent
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Meta) UnmarshalJSON(bytes []byte) (err error) {
	varMeta := _Meta{}

	err = json.Unmarshal(bytes, &varMeta)

	if err != nil {
		return err
	}

	*o = Meta(varMeta)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "hasRisk")
		delete(additionalProperties, "safetyStdAnswer")
		delete(additionalProperties, "rewriteContent")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMeta struct {
	value *Meta
	isSet bool
}

func (v NullableMeta) Get() *Meta {
	return v.value
}

func (v *NullableMeta) Set(val *Meta) {
	v.value = val
	v.isSet = true
}

func (v NullableMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeta(val *Meta) *NullableMeta {
	return &NullableMeta{value: val, isSet: true}
}

func (v NullableMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
