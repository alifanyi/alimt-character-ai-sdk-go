/*
XingChen 开放接口定义

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xingchen

import (
	"encoding/json"
)

// checks if the ChatHistoryQueryDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatHistoryQueryDTO{}

// ChatHistoryQueryDTO 聊天历史查询对象
type ChatHistoryQueryDTO struct {
	GatewayAddContent *GatewayIssuedParams   `json:"gatewayAddContent,omitempty"`
	Where             *ChatHistoryQueryWhere `json:"where,omitempty"`
	// 排序条件，支持的排序字段为： - gmtCreate 排序优先级按列表顺序，默认降序，如果期望升序，需要在字段后指定，如：orderBy: [\\\"gmtCreate desc\\\"] （gmtCreate 按降序）
	OrderBy []string `json:"orderBy,omitempty"`
	// 页码，默认为 0
	PageNum *int32 `json:"pageNum,omitempty"`
	// 页条目数，1～50，默认为 10
	PageSize             *int32 `json:"pageSize,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ChatHistoryQueryDTO ChatHistoryQueryDTO

// NewChatHistoryQueryDTO instantiates a new ChatHistoryQueryDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatHistoryQueryDTO() *ChatHistoryQueryDTO {
	this := ChatHistoryQueryDTO{}
	return &this
}

// NewChatHistoryQueryDTOWithDefaults instantiates a new ChatHistoryQueryDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatHistoryQueryDTOWithDefaults() *ChatHistoryQueryDTO {
	this := ChatHistoryQueryDTO{}
	return &this
}

// GetGatewayAddContent returns the GatewayAddContent field value if set, zero value otherwise.
func (o *ChatHistoryQueryDTO) GetGatewayAddContent() GatewayIssuedParams {
	if o == nil || IsNil(o.GatewayAddContent) {
		var ret GatewayIssuedParams
		return ret
	}
	return *o.GatewayAddContent
}

// GetGatewayAddContentOk returns a tuple with the GatewayAddContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatHistoryQueryDTO) GetGatewayAddContentOk() (*GatewayIssuedParams, bool) {
	if o == nil || IsNil(o.GatewayAddContent) {
		return nil, false
	}
	return o.GatewayAddContent, true
}

// HasGatewayAddContent returns a boolean if a field has been set.
func (o *ChatHistoryQueryDTO) HasGatewayAddContent() bool {
	if o != nil && !IsNil(o.GatewayAddContent) {
		return true
	}

	return false
}

// SetGatewayAddContent gets a reference to the given GatewayIssuedParams and assigns it to the GatewayAddContent field.
func (o *ChatHistoryQueryDTO) SetGatewayAddContent(v GatewayIssuedParams) {
	o.GatewayAddContent = &v
}

// GetWhere returns the Where field value if set, zero value otherwise.
func (o *ChatHistoryQueryDTO) GetWhere() ChatHistoryQueryWhere {
	if o == nil || IsNil(o.Where) {
		var ret ChatHistoryQueryWhere
		return ret
	}
	return *o.Where
}

// GetWhereOk returns a tuple with the Where field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatHistoryQueryDTO) GetWhereOk() (*ChatHistoryQueryWhere, bool) {
	if o == nil || IsNil(o.Where) {
		return nil, false
	}
	return o.Where, true
}

// HasWhere returns a boolean if a field has been set.
func (o *ChatHistoryQueryDTO) HasWhere() bool {
	if o != nil && !IsNil(o.Where) {
		return true
	}

	return false
}

// SetWhere gets a reference to the given ChatHistoryQueryWhere and assigns it to the Where field.
func (o *ChatHistoryQueryDTO) SetWhere(v ChatHistoryQueryWhere) {
	o.Where = &v
}

// GetOrderBy returns the OrderBy field value if set, zero value otherwise.
func (o *ChatHistoryQueryDTO) GetOrderBy() []string {
	if o == nil || IsNil(o.OrderBy) {
		var ret []string
		return ret
	}
	return o.OrderBy
}

// GetOrderByOk returns a tuple with the OrderBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatHistoryQueryDTO) GetOrderByOk() ([]string, bool) {
	if o == nil || IsNil(o.OrderBy) {
		return nil, false
	}
	return o.OrderBy, true
}

// HasOrderBy returns a boolean if a field has been set.
func (o *ChatHistoryQueryDTO) HasOrderBy() bool {
	if o != nil && !IsNil(o.OrderBy) {
		return true
	}

	return false
}

// SetOrderBy gets a reference to the given []string and assigns it to the OrderBy field.
func (o *ChatHistoryQueryDTO) SetOrderBy(v []string) {
	o.OrderBy = v
}

// GetPageNum returns the PageNum field value if set, zero value otherwise.
func (o *ChatHistoryQueryDTO) GetPageNum() int32 {
	if o == nil || IsNil(o.PageNum) {
		var ret int32
		return ret
	}
	return *o.PageNum
}

// GetPageNumOk returns a tuple with the PageNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatHistoryQueryDTO) GetPageNumOk() (*int32, bool) {
	if o == nil || IsNil(o.PageNum) {
		return nil, false
	}
	return o.PageNum, true
}

// HasPageNum returns a boolean if a field has been set.
func (o *ChatHistoryQueryDTO) HasPageNum() bool {
	if o != nil && !IsNil(o.PageNum) {
		return true
	}

	return false
}

// SetPageNum gets a reference to the given int32 and assigns it to the PageNum field.
func (o *ChatHistoryQueryDTO) SetPageNum(v int32) {
	o.PageNum = &v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *ChatHistoryQueryDTO) GetPageSize() int32 {
	if o == nil || IsNil(o.PageSize) {
		var ret int32
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatHistoryQueryDTO) GetPageSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.PageSize) {
		return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *ChatHistoryQueryDTO) HasPageSize() bool {
	if o != nil && !IsNil(o.PageSize) {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given int32 and assigns it to the PageSize field.
func (o *ChatHistoryQueryDTO) SetPageSize(v int32) {
	o.PageSize = &v
}

func (o ChatHistoryQueryDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatHistoryQueryDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GatewayAddContent) {
		toSerialize["gatewayAddContent"] = o.GatewayAddContent
	}
	if !IsNil(o.Where) {
		toSerialize["where"] = o.Where
	}
	if !IsNil(o.OrderBy) {
		toSerialize["orderBy"] = o.OrderBy
	}
	if !IsNil(o.PageNum) {
		toSerialize["pageNum"] = o.PageNum
	}
	if !IsNil(o.PageSize) {
		toSerialize["pageSize"] = o.PageSize
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ChatHistoryQueryDTO) UnmarshalJSON(bytes []byte) (err error) {
	varChatHistoryQueryDTO := _ChatHistoryQueryDTO{}

	err = json.Unmarshal(bytes, &varChatHistoryQueryDTO)

	if err != nil {
		return err
	}

	*o = ChatHistoryQueryDTO(varChatHistoryQueryDTO)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "gatewayAddContent")
		delete(additionalProperties, "where")
		delete(additionalProperties, "orderBy")
		delete(additionalProperties, "pageNum")
		delete(additionalProperties, "pageSize")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChatHistoryQueryDTO struct {
	value *ChatHistoryQueryDTO
	isSet bool
}

func (v NullableChatHistoryQueryDTO) Get() *ChatHistoryQueryDTO {
	return v.value
}

func (v *NullableChatHistoryQueryDTO) Set(val *ChatHistoryQueryDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableChatHistoryQueryDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableChatHistoryQueryDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatHistoryQueryDTO(val *ChatHistoryQueryDTO) *NullableChatHistoryQueryDTO {
	return &NullableChatHistoryQueryDTO{value: val, isSet: true}
}

func (v NullableChatHistoryQueryDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatHistoryQueryDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
