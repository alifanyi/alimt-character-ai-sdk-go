/*
XingChen 开放接口定义

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xingchen

import (
	"encoding/json"
)

// checks if the Scenario type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Scenario{}

// Scenario struct for Scenario
type Scenario struct {
	Description  *string  `json:"description,omitempty"`
	Topics       []string `json:"topics,omitempty"`
	UserTags     []string `json:"userTags,omitempty"`
	SafetyPrompt *string  `json:"safetyPrompt,omitempty"`
	IsRealTime   *bool    `json:"isRealTime,omitempty"`

	AdditionalProperties map[string]interface{}
}

type _Scenario Scenario

// NewScenario instantiates a new Scenario object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScenario() *Scenario {
	this := Scenario{}
	return &this
}

// NewScenarioWithDefaults instantiates a new Scenario object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScenarioWithDefaults() *Scenario {
	this := Scenario{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Scenario) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scenario) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Scenario) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Scenario) SetDescription(v string) {
	o.Description = &v
}

// GetTopics returns the Topics field value if set, zero value otherwise.
func (o *Scenario) GetTopics() []string {
	if o == nil || IsNil(o.Topics) {
		var ret []string
		return ret
	}
	return o.Topics
}

// GetTopicsOk returns a tuple with the Topics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scenario) GetTopicsOk() ([]string, bool) {
	if o == nil || IsNil(o.Topics) {
		return nil, false
	}
	return o.Topics, true
}

// HasTopics returns a boolean if a field has been set.
func (o *Scenario) HasTopics() bool {
	if o != nil && !IsNil(o.Topics) {
		return true
	}

	return false
}

// SetTopics gets a reference to the given []string and assigns it to the Topics field.
func (o *Scenario) SetTopics(v []string) {
	o.Topics = v
}

// GetUserTags returns the UserTags field value if set, zero value otherwise.
func (o *Scenario) GetUserTags() []string {
	if o == nil || IsNil(o.UserTags) {
		var ret []string
		return ret
	}
	return o.UserTags
}

// GetUserTagsOk returns a tuple with the UserTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scenario) GetUserTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.UserTags) {
		return nil, false
	}
	return o.UserTags, true
}

// HasUserTags returns a boolean if a field has been set.
func (o *Scenario) HasUserTags() bool {
	if o != nil && !IsNil(o.UserTags) {
		return true
	}

	return false
}

// SetUserTags gets a reference to the given []string and assigns it to the UserTags field.
func (o *Scenario) SetUserTags(v []string) {
	o.UserTags = v
}

func (o *Scenario) GetSafetyPrompt() string {
	if o == nil || IsNil(o.SafetyPrompt) {
		var ret string
		return ret
	}
	return *o.SafetyPrompt
}

func (o *Scenario) GetSafetyPromptOk() (*string, bool) {
	if o == nil || IsNil(o.SafetyPrompt) {
		return nil, false
	}
	return o.SafetyPrompt, true
}

func (o *Scenario) HasSafetyPrompt() bool {
	if o != nil && !IsNil(o.SafetyPrompt) {
		return true
	}

	return false
}

func (o *Scenario) SetSafetyPrompt(v string) {
	o.SafetyPrompt = &v
}

func (o *Scenario) GetIsRealTime() bool {
	if o == nil || IsNil(o.IsRealTime) {
		var ret bool
		return ret
	}
	return *o.IsRealTime
}

func (o *Scenario) GetIsRealTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRealTime) {
		return nil, false
	}
	return o.IsRealTime, true
}

func (o *Scenario) HasIsRealTime() bool {
	if o != nil && !IsNil(o.IsRealTime) {
		return true
	}

	return false
}

func (o *Scenario) SetIsRealTime(v bool) {
	o.IsRealTime = &v
}

func (o Scenario) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Scenario) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Topics) {
		toSerialize["topics"] = o.Topics
	}
	if !IsNil(o.UserTags) {
		toSerialize["userTags"] = o.UserTags
	}
	if !IsNil(o.SafetyPrompt) {
		toSerialize["safetyPrompt"] = o.SafetyPrompt
	}
	if !IsNil(o.IsRealTime) {
		toSerialize["isRealTime"] = o.IsRealTime
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Scenario) UnmarshalJSON(bytes []byte) (err error) {
	varScenario := _Scenario{}

	err = json.Unmarshal(bytes, &varScenario)

	if err != nil {
		return err
	}

	*o = Scenario(varScenario)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "topics")
		delete(additionalProperties, "userTags")
		delete(additionalProperties, "safetyPrompt")
		delete(additionalProperties, "isRealTime")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableScenario struct {
	value *Scenario
	isSet bool
}

func (v NullableScenario) Get() *Scenario {
	return v.value
}

func (v *NullableScenario) Set(val *Scenario) {
	v.value = val
	v.isSet = true
}

func (v NullableScenario) IsSet() bool {
	return v.isSet
}

func (v *NullableScenario) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScenario(val *Scenario) *NullableScenario {
	return &NullableScenario{value: val, isSet: true}
}

func (v NullableScenario) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScenario) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
