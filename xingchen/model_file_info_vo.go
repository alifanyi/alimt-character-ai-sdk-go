/*
XingChen 开放接口定义

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xingchen

import (
	"encoding/json"
)

// checks if the FileInfoVO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileInfoVO{}

// FileInfoVO 角色头像
type FileInfoVO struct {
	FileSavePath         *string `json:"fileSavePath,omitempty"`
	Filename             *string `json:"filename,omitempty"`
	FileUrl              *string `json:"fileUrl,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FileInfoVO FileInfoVO

// NewFileInfoVO instantiates a new FileInfoVO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileInfoVO() *FileInfoVO {
	this := FileInfoVO{}
	return &this
}

// NewFileInfoVOWithDefaults instantiates a new FileInfoVO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileInfoVOWithDefaults() *FileInfoVO {
	this := FileInfoVO{}
	return &this
}

// GetFileSavePath returns the FileSavePath field value if set, zero value otherwise.
func (o *FileInfoVO) GetFileSavePath() string {
	if o == nil || IsNil(o.FileSavePath) {
		var ret string
		return ret
	}
	return *o.FileSavePath
}

// GetFileSavePathOk returns a tuple with the FileSavePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInfoVO) GetFileSavePathOk() (*string, bool) {
	if o == nil || IsNil(o.FileSavePath) {
		return nil, false
	}
	return o.FileSavePath, true
}

// HasFileSavePath returns a boolean if a field has been set.
func (o *FileInfoVO) HasFileSavePath() bool {
	if o != nil && !IsNil(o.FileSavePath) {
		return true
	}

	return false
}

// SetFileSavePath gets a reference to the given string and assigns it to the FileSavePath field.
func (o *FileInfoVO) SetFileSavePath(v string) {
	o.FileSavePath = &v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *FileInfoVO) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInfoVO) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *FileInfoVO) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *FileInfoVO) SetFilename(v string) {
	o.Filename = &v
}

// GetFileUrl returns the FileUrl field value if set, zero value otherwise.
func (o *FileInfoVO) GetFileUrl() string {
	if o == nil || IsNil(o.FileUrl) {
		var ret string
		return ret
	}
	return *o.FileUrl
}

// GetFileUrlOk returns a tuple with the FileUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInfoVO) GetFileUrlOk() (*string, bool) {
	if o == nil || IsNil(o.FileUrl) {
		return nil, false
	}
	return o.FileUrl, true
}

// HasFileUrl returns a boolean if a field has been set.
func (o *FileInfoVO) HasFileUrl() bool {
	if o != nil && !IsNil(o.FileUrl) {
		return true
	}

	return false
}

// SetFileUrl gets a reference to the given string and assigns it to the FileUrl field.
func (o *FileInfoVO) SetFileUrl(v string) {
	o.FileUrl = &v
}

func (o FileInfoVO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileInfoVO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileSavePath) {
		toSerialize["fileSavePath"] = o.FileSavePath
	}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	if !IsNil(o.FileUrl) {
		toSerialize["fileUrl"] = o.FileUrl
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FileInfoVO) UnmarshalJSON(bytes []byte) (err error) {
	varFileInfoVO := _FileInfoVO{}

	err = json.Unmarshal(bytes, &varFileInfoVO)

	if err != nil {
		return err
	}

	*o = FileInfoVO(varFileInfoVO)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "fileSavePath")
		delete(additionalProperties, "filename")
		delete(additionalProperties, "fileUrl")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFileInfoVO struct {
	value *FileInfoVO
	isSet bool
}

func (v NullableFileInfoVO) Get() *FileInfoVO {
	return v.value
}

func (v *NullableFileInfoVO) Set(val *FileInfoVO) {
	v.value = val
	v.isSet = true
}

func (v NullableFileInfoVO) IsSet() bool {
	return v.isSet
}

func (v *NullableFileInfoVO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileInfoVO(val *FileInfoVO) *NullableFileInfoVO {
	return &NullableFileInfoVO{value: val, isSet: true}
}

func (v NullableFileInfoVO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileInfoVO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
