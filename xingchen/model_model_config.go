/*
XingChen 开放接口定义

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xingchen

import (
	"encoding/json"
)

// checks if the ModelConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelConfig{}

// ModelConfig 角色模型配置
type ModelConfig struct {
	// 角色说话的最长字数
	MaxLength *int32 `json:"maxLength,omitempty"`
	// 角色说话的最长字数
	MinLength *int32 `json:"minLength,omitempty"`
	// 可选，默认切在“默认”选项，选择“其他”时可以自行填入数字（提示最大为1？）；默认（背后参数为0.8）
	TopP *float64 `json:"topP,omitempty"`
	// 可选，默认切在“默认”选项，共4个选项（默认、风格稳定、自由发散、其他），选择“其他”时可以自行填入数字（提示最大为xx）；默认（背后参数为1），风格稳定（背后参数为0.92），自由发散（背后参数为1.02）
	Temperature          *float64 `json:"temperature,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelConfig ModelConfig

// NewModelConfig instantiates a new ModelConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelConfig() *ModelConfig {
	this := ModelConfig{}
	return &this
}

// NewModelConfigWithDefaults instantiates a new ModelConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelConfigWithDefaults() *ModelConfig {
	this := ModelConfig{}
	return &this
}

// GetMaxLength returns the MaxLength field value if set, zero value otherwise.
func (o *ModelConfig) GetMaxLength() int32 {
	if o == nil || IsNil(o.MaxLength) {
		var ret int32
		return ret
	}
	return *o.MaxLength
}

// GetMaxLengthOk returns a tuple with the MaxLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelConfig) GetMaxLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxLength) {
		return nil, false
	}
	return o.MaxLength, true
}

// HasMaxLength returns a boolean if a field has been set.
func (o *ModelConfig) HasMaxLength() bool {
	if o != nil && !IsNil(o.MaxLength) {
		return true
	}

	return false
}

// SetMaxLength gets a reference to the given int32 and assigns it to the MaxLength field.
func (o *ModelConfig) SetMaxLength(v int32) {
	o.MaxLength = &v
}

// GetMinLength returns the MinLength field value if set, zero value otherwise.
func (o *ModelConfig) GetMinLength() int32 {
	if o == nil || IsNil(o.MinLength) {
		var ret int32
		return ret
	}
	return *o.MinLength
}

// GetMinLengthOk returns a tuple with the MinLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelConfig) GetMinLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MinLength) {
		return nil, false
	}
	return o.MinLength, true
}

// HasMinLength returns a boolean if a field has been set.
func (o *ModelConfig) HasMinLength() bool {
	if o != nil && !IsNil(o.MinLength) {
		return true
	}

	return false
}

// SetMinLength gets a reference to the given int32 and assigns it to the MinLength field.
func (o *ModelConfig) SetMinLength(v int32) {
	o.MinLength = &v
}

// GetTopP returns the TopP field value if set, zero value otherwise.
func (o *ModelConfig) GetTopP() float64 {
	if o == nil || IsNil(o.TopP) {
		var ret float64
		return ret
	}
	return *o.TopP
}

// GetTopPOk returns a tuple with the TopP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelConfig) GetTopPOk() (*float64, bool) {
	if o == nil || IsNil(o.TopP) {
		return nil, false
	}
	return o.TopP, true
}

// HasTopP returns a boolean if a field has been set.
func (o *ModelConfig) HasTopP() bool {
	if o != nil && !IsNil(o.TopP) {
		return true
	}

	return false
}

// SetTopP gets a reference to the given float64 and assigns it to the TopP field.
func (o *ModelConfig) SetTopP(v float64) {
	o.TopP = &v
}

// GetTemperature returns the Temperature field value if set, zero value otherwise.
func (o *ModelConfig) GetTemperature() float64 {
	if o == nil || IsNil(o.Temperature) {
		var ret float64
		return ret
	}
	return *o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelConfig) GetTemperatureOk() (*float64, bool) {
	if o == nil || IsNil(o.Temperature) {
		return nil, false
	}
	return o.Temperature, true
}

// HasTemperature returns a boolean if a field has been set.
func (o *ModelConfig) HasTemperature() bool {
	if o != nil && !IsNil(o.Temperature) {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given float64 and assigns it to the Temperature field.
func (o *ModelConfig) SetTemperature(v float64) {
	o.Temperature = &v
}

func (o ModelConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaxLength) {
		toSerialize["maxLength"] = o.MaxLength
	}
	if !IsNil(o.MinLength) {
		toSerialize["minLength"] = o.MinLength
	}
	if !IsNil(o.TopP) {
		toSerialize["topP"] = o.TopP
	}
	if !IsNil(o.Temperature) {
		toSerialize["temperature"] = o.Temperature
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelConfig) UnmarshalJSON(bytes []byte) (err error) {
	varModelConfig := _ModelConfig{}

	err = json.Unmarshal(bytes, &varModelConfig)

	if err != nil {
		return err
	}

	*o = ModelConfig(varModelConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "maxLength")
		delete(additionalProperties, "minLength")
		delete(additionalProperties, "topP")
		delete(additionalProperties, "temperature")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelConfig struct {
	value *ModelConfig
	isSet bool
}

func (v NullableModelConfig) Get() *ModelConfig {
	return v.value
}

func (v *NullableModelConfig) Set(val *ModelConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableModelConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableModelConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelConfig(val *ModelConfig) *NullableModelConfig {
	return &NullableModelConfig{value: val, isSet: true}
}

func (v NullableModelConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
