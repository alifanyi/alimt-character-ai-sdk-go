/*
XingChen 开放接口定义

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xingchen

import (
	"encoding/json"
)

// checks if the CharacterDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CharacterDTO{}

// CharacterDTO 角色信息
type CharacterDTO struct {
	GatewayAddContent *GatewayIssuedParams `json:"gatewayAddContent,omitempty"`
	// 角色名称(最多20个字符)
	Name   string      `json:"name"`
	Avatar *FileInfoVO `json:"avatar,omitempty"`
	// 角色描述
	Introduction string `json:"introduction"`
	// 基本信息
	BasicInformation string `json:"basicInformation"`
	// 开场白
	OpeningLine string `json:"openingLine"`
	// 角色特点
	Traits *string `json:"traits,omitempty"`
	// 聊天示例
	ChatExample *string `json:"chatExample,omitempty"`
	// 角色类型，virtual:虚拟角色，reproduction:已知角色复刻
	Type *string `json:"type,omitempty"`
	// 对话目标
	ChatObjective  *string                  `json:"chatObjective,omitempty"`
	AdvancedConfig *CharacterAdvancedConfig `json:"advancedConfig,omitempty"`
	// 角色唯一ID
	CharacterId *string `json:"characterId,omitempty"`
	// 角色版本
	Version *int32 `json:"version,omitempty"`
	// 主版本
	MajorVersion *int32 `json:"majorVersion,omitempty"`
	// 创建时间
	GmtCreate *int64 `json:"gmtCreate,omitempty"`
	// 修改时间
	GmtModified *int64 `json:"gmtModified,omitempty"`
	// 角色创建用户ID
	UserId *string `json:"userId,omitempty"`
	// 角色最后修改人ID
	ModifiedBy *string `json:"modifiedBy,omitempty"`
	// 角色标签
	Tags []string `json:"tags,omitempty"`
	// 角色气泡
	Bubbles []string `json:"bubbles,omitempty"`
	// 背景图片
	BackgroundImgUrl *string                    `json:"backgroundImgUrl,omitempty"`
	PermConfig       *CharacterPermissionConfig `json:"permConfig,omitempty"`
	// 版本列表
	Versions []int32 `json:"versions,omitempty"`
	// 当前用户是否可管理
	Manageable *bool `json:"manageable,omitempty"`
	// 创建者
	Creator *string `json:"creator,omitempty"`
	// 是否官方创建
	IsPreConfigured *bool `json:"isPreConfigured,omitempty"`
	// 是否抽取记忆
	ExtractMemory *bool `json:"extractMemory,omitempty"`
	// 是否抽取瞬间
	ExtractMoment        *bool    `json:"extractMoment,omitempty"`
	RoleTypes            []string `json:"roleTypes,omitempty"`
	AuditStatus          *string  `json:"auditStatus,omitempty"`
	ConfigStatus         *string  `json:"configStatus,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CharacterDTO CharacterDTO

// NewCharacterDTO instantiates a new CharacterDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCharacterDTO(name string, introduction string, basicInformation string, openingLine string) *CharacterDTO {
	this := CharacterDTO{}
	this.Name = name
	this.Introduction = introduction
	this.BasicInformation = basicInformation
	this.OpeningLine = openingLine
	return &this
}

// NewCharacterDTOWithDefaults instantiates a new CharacterDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCharacterDTOWithDefaults() *CharacterDTO {
	this := CharacterDTO{}
	return &this
}

// GetGatewayAddContent returns the GatewayAddContent field value if set, zero value otherwise.
func (o *CharacterDTO) GetGatewayAddContent() GatewayIssuedParams {
	if o == nil || IsNil(o.GatewayAddContent) {
		var ret GatewayIssuedParams
		return ret
	}
	return *o.GatewayAddContent
}

// GetGatewayAddContentOk returns a tuple with the GatewayAddContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetGatewayAddContentOk() (*GatewayIssuedParams, bool) {
	if o == nil || IsNil(o.GatewayAddContent) {
		return nil, false
	}
	return o.GatewayAddContent, true
}

// HasGatewayAddContent returns a boolean if a field has been set.
func (o *CharacterDTO) HasGatewayAddContent() bool {
	if o != nil && !IsNil(o.GatewayAddContent) {
		return true
	}

	return false
}

// SetGatewayAddContent gets a reference to the given GatewayIssuedParams and assigns it to the GatewayAddContent field.
func (o *CharacterDTO) SetGatewayAddContent(v GatewayIssuedParams) {
	o.GatewayAddContent = &v
}

// GetName returns the Name field value
func (o *CharacterDTO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CharacterDTO) SetName(v string) {
	o.Name = v
}

// GetAvatar returns the Avatar field value if set, zero value otherwise.
func (o *CharacterDTO) GetAvatar() FileInfoVO {
	if o == nil || IsNil(o.Avatar) {
		var ret FileInfoVO
		return ret
	}
	return *o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetAvatarOk() (*FileInfoVO, bool) {
	if o == nil || IsNil(o.Avatar) {
		return nil, false
	}
	return o.Avatar, true
}

// HasAvatar returns a boolean if a field has been set.
func (o *CharacterDTO) HasAvatar() bool {
	if o != nil && !IsNil(o.Avatar) {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given FileInfoVO and assigns it to the Avatar field.
func (o *CharacterDTO) SetAvatar(v FileInfoVO) {
	o.Avatar = &v
}

// GetIntroduction returns the Introduction field value
func (o *CharacterDTO) GetIntroduction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Introduction
}

// GetIntroductionOk returns a tuple with the Introduction field value
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetIntroductionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Introduction, true
}

// SetIntroduction sets field value
func (o *CharacterDTO) SetIntroduction(v string) {
	o.Introduction = v
}

// GetBasicInformation returns the BasicInformation field value
func (o *CharacterDTO) GetBasicInformation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BasicInformation
}

// GetBasicInformationOk returns a tuple with the BasicInformation field value
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetBasicInformationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BasicInformation, true
}

// SetBasicInformation sets field value
func (o *CharacterDTO) SetBasicInformation(v string) {
	o.BasicInformation = v
}

// GetOpeningLine returns the OpeningLine field value
func (o *CharacterDTO) GetOpeningLine() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OpeningLine
}

// GetOpeningLineOk returns a tuple with the OpeningLine field value
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetOpeningLineOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OpeningLine, true
}

// SetOpeningLine sets field value
func (o *CharacterDTO) SetOpeningLine(v string) {
	o.OpeningLine = v
}

// GetTraits returns the Traits field value if set, zero value otherwise.
func (o *CharacterDTO) GetTraits() string {
	if o == nil || IsNil(o.Traits) {
		var ret string
		return ret
	}
	return *o.Traits
}

// GetTraitsOk returns a tuple with the Traits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetTraitsOk() (*string, bool) {
	if o == nil || IsNil(o.Traits) {
		return nil, false
	}
	return o.Traits, true
}

// HasTraits returns a boolean if a field has been set.
func (o *CharacterDTO) HasTraits() bool {
	if o != nil && !IsNil(o.Traits) {
		return true
	}

	return false
}

// SetTraits gets a reference to the given string and assigns it to the Traits field.
func (o *CharacterDTO) SetTraits(v string) {
	o.Traits = &v
}

// GetChatExample returns the ChatExample field value if set, zero value otherwise.
func (o *CharacterDTO) GetChatExample() string {
	if o == nil || IsNil(o.ChatExample) {
		var ret string
		return ret
	}
	return *o.ChatExample
}

// GetChatExampleOk returns a tuple with the ChatExample field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetChatExampleOk() (*string, bool) {
	if o == nil || IsNil(o.ChatExample) {
		return nil, false
	}
	return o.ChatExample, true
}

// HasChatExample returns a boolean if a field has been set.
func (o *CharacterDTO) HasChatExample() bool {
	if o != nil && !IsNil(o.ChatExample) {
		return true
	}

	return false
}

// SetChatExample gets a reference to the given string and assigns it to the ChatExample field.
func (o *CharacterDTO) SetChatExample(v string) {
	o.ChatExample = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CharacterDTO) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CharacterDTO) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CharacterDTO) SetType(v string) {
	o.Type = &v
}

// GetChatObjective returns the ChatObjective field value if set, zero value otherwise.
func (o *CharacterDTO) GetChatObjective() string {
	if o == nil || IsNil(o.ChatObjective) {
		var ret string
		return ret
	}
	return *o.ChatObjective
}

// GetChatObjectiveOk returns a tuple with the ChatObjective field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetChatObjectiveOk() (*string, bool) {
	if o == nil || IsNil(o.ChatObjective) {
		return nil, false
	}
	return o.ChatObjective, true
}

// HasChatObjective returns a boolean if a field has been set.
func (o *CharacterDTO) HasChatObjective() bool {
	if o != nil && !IsNil(o.ChatObjective) {
		return true
	}

	return false
}

// SetChatObjective gets a reference to the given string and assigns it to the ChatObjective field.
func (o *CharacterDTO) SetChatObjective(v string) {
	o.ChatObjective = &v
}

// GetAdvancedConfig returns the AdvancedConfig field value if set, zero value otherwise.
func (o *CharacterDTO) GetAdvancedConfig() CharacterAdvancedConfig {
	if o == nil || IsNil(o.AdvancedConfig) {
		var ret CharacterAdvancedConfig
		return ret
	}
	return *o.AdvancedConfig
}

// GetAdvancedConfigOk returns a tuple with the AdvancedConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetAdvancedConfigOk() (*CharacterAdvancedConfig, bool) {
	if o == nil || IsNil(o.AdvancedConfig) {
		return nil, false
	}
	return o.AdvancedConfig, true
}

// HasAdvancedConfig returns a boolean if a field has been set.
func (o *CharacterDTO) HasAdvancedConfig() bool {
	if o != nil && !IsNil(o.AdvancedConfig) {
		return true
	}

	return false
}

// SetAdvancedConfig gets a reference to the given CharacterAdvancedConfig and assigns it to the AdvancedConfig field.
func (o *CharacterDTO) SetAdvancedConfig(v CharacterAdvancedConfig) {
	o.AdvancedConfig = &v
}

// GetCharacterId returns the CharacterId field value if set, zero value otherwise.
func (o *CharacterDTO) GetCharacterId() string {
	if o == nil || IsNil(o.CharacterId) {
		var ret string
		return ret
	}
	return *o.CharacterId
}

// GetCharacterIdOk returns a tuple with the CharacterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetCharacterIdOk() (*string, bool) {
	if o == nil || IsNil(o.CharacterId) {
		return nil, false
	}
	return o.CharacterId, true
}

// HasCharacterId returns a boolean if a field has been set.
func (o *CharacterDTO) HasCharacterId() bool {
	if o != nil && !IsNil(o.CharacterId) {
		return true
	}

	return false
}

// SetCharacterId gets a reference to the given string and assigns it to the CharacterId field.
func (o *CharacterDTO) SetCharacterId(v string) {
	o.CharacterId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *CharacterDTO) GetVersion() int32 {
	if o == nil || IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *CharacterDTO) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *CharacterDTO) SetVersion(v int32) {
	o.Version = &v
}

// GetMajorVersion returns the MajorVersion field value if set, zero value otherwise.
func (o *CharacterDTO) GetMajorVersion() int32 {
	if o == nil || IsNil(o.MajorVersion) {
		var ret int32
		return ret
	}
	return *o.MajorVersion
}

// GetMajorVersionOk returns a tuple with the MajorVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetMajorVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.MajorVersion) {
		return nil, false
	}
	return o.MajorVersion, true
}

// HasMajorVersion returns a boolean if a field has been set.
func (o *CharacterDTO) HasMajorVersion() bool {
	if o != nil && !IsNil(o.MajorVersion) {
		return true
	}

	return false
}

// SetMajorVersion gets a reference to the given int32 and assigns it to the MajorVersion field.
func (o *CharacterDTO) SetMajorVersion(v int32) {
	o.MajorVersion = &v
}

// GetGmtCreate returns the GmtCreate field value if set, zero value otherwise.
func (o *CharacterDTO) GetGmtCreate() int64 {
	if o == nil || IsNil(o.GmtCreate) {
		var ret int64
		return ret
	}
	return *o.GmtCreate
}

// GetGmtCreateOk returns a tuple with the GmtCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetGmtCreateOk() (*int64, bool) {
	if o == nil || IsNil(o.GmtCreate) {
		return nil, false
	}
	return o.GmtCreate, true
}

// HasGmtCreate returns a boolean if a field has been set.
func (o *CharacterDTO) HasGmtCreate() bool {
	if o != nil && !IsNil(o.GmtCreate) {
		return true
	}

	return false
}

// SetGmtCreate gets a reference to the given int64 and assigns it to the GmtCreate field.
func (o *CharacterDTO) SetGmtCreate(v int64) {
	o.GmtCreate = &v
}

// GetGmtModified returns the GmtModified field value if set, zero value otherwise.
func (o *CharacterDTO) GetGmtModified() int64 {
	if o == nil || IsNil(o.GmtModified) {
		var ret int64
		return ret
	}
	return *o.GmtModified
}

// GetGmtModifiedOk returns a tuple with the GmtModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetGmtModifiedOk() (*int64, bool) {
	if o == nil || IsNil(o.GmtModified) {
		return nil, false
	}
	return o.GmtModified, true
}

// HasGmtModified returns a boolean if a field has been set.
func (o *CharacterDTO) HasGmtModified() bool {
	if o != nil && !IsNil(o.GmtModified) {
		return true
	}

	return false
}

// SetGmtModified gets a reference to the given int64 and assigns it to the GmtModified field.
func (o *CharacterDTO) SetGmtModified(v int64) {
	o.GmtModified = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *CharacterDTO) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *CharacterDTO) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *CharacterDTO) SetUserId(v string) {
	o.UserId = &v
}

// GetModifiedBy returns the ModifiedBy field value if set, zero value otherwise.
func (o *CharacterDTO) GetModifiedBy() string {
	if o == nil || IsNil(o.ModifiedBy) {
		var ret string
		return ret
	}
	return *o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetModifiedByOk() (*string, bool) {
	if o == nil || IsNil(o.ModifiedBy) {
		return nil, false
	}
	return o.ModifiedBy, true
}

// HasModifiedBy returns a boolean if a field has been set.
func (o *CharacterDTO) HasModifiedBy() bool {
	if o != nil && !IsNil(o.ModifiedBy) {
		return true
	}

	return false
}

// SetModifiedBy gets a reference to the given string and assigns it to the ModifiedBy field.
func (o *CharacterDTO) SetModifiedBy(v string) {
	o.ModifiedBy = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *CharacterDTO) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CharacterDTO) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *CharacterDTO) SetTags(v []string) {
	o.Tags = v
}

// GetBubbles returns the Bubbles field value if set, zero value otherwise.
func (o *CharacterDTO) GetBubbles() []string {
	if o == nil || IsNil(o.Bubbles) {
		var ret []string
		return ret
	}
	return o.Bubbles
}

// GetBubblesOk returns a tuple with the Bubbles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetBubblesOk() ([]string, bool) {
	if o == nil || IsNil(o.Bubbles) {
		return nil, false
	}
	return o.Bubbles, true
}

// HasBubbles returns a boolean if a field has been set.
func (o *CharacterDTO) HasBubbles() bool {
	if o != nil && !IsNil(o.Bubbles) {
		return true
	}

	return false
}

// SetBubbles gets a reference to the given []string and assigns it to the Bubbles field.
func (o *CharacterDTO) SetBubbles(v []string) {
	o.Bubbles = v
}

// GetBackgroundImgUrl returns the BackgroundImgUrl field value if set, zero value otherwise.
func (o *CharacterDTO) GetBackgroundImgUrl() string {
	if o == nil || IsNil(o.BackgroundImgUrl) {
		var ret string
		return ret
	}
	return *o.BackgroundImgUrl
}

// GetBackgroundImgUrlOk returns a tuple with the BackgroundImgUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetBackgroundImgUrlOk() (*string, bool) {
	if o == nil || IsNil(o.BackgroundImgUrl) {
		return nil, false
	}
	return o.BackgroundImgUrl, true
}

// HasBackgroundImgUrl returns a boolean if a field has been set.
func (o *CharacterDTO) HasBackgroundImgUrl() bool {
	if o != nil && !IsNil(o.BackgroundImgUrl) {
		return true
	}

	return false
}

// SetBackgroundImgUrl gets a reference to the given string and assigns it to the BackgroundImgUrl field.
func (o *CharacterDTO) SetBackgroundImgUrl(v string) {
	o.BackgroundImgUrl = &v
}

// GetPermConfig returns the PermConfig field value if set, zero value otherwise.
func (o *CharacterDTO) GetPermConfig() CharacterPermissionConfig {
	if o == nil || IsNil(o.PermConfig) {
		var ret CharacterPermissionConfig
		return ret
	}
	return *o.PermConfig
}

// GetPermConfigOk returns a tuple with the PermConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetPermConfigOk() (*CharacterPermissionConfig, bool) {
	if o == nil || IsNil(o.PermConfig) {
		return nil, false
	}
	return o.PermConfig, true
}

// HasPermConfig returns a boolean if a field has been set.
func (o *CharacterDTO) HasPermConfig() bool {
	if o != nil && !IsNil(o.PermConfig) {
		return true
	}

	return false
}

// SetPermConfig gets a reference to the given CharacterPermissionConfig and assigns it to the PermConfig field.
func (o *CharacterDTO) SetPermConfig(v CharacterPermissionConfig) {
	o.PermConfig = &v
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *CharacterDTO) GetVersions() []int32 {
	if o == nil || IsNil(o.Versions) {
		var ret []int32
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetVersionsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *CharacterDTO) HasVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []int32 and assigns it to the Versions field.
func (o *CharacterDTO) SetVersions(v []int32) {
	o.Versions = v
}

// GetManageable returns the Manageable field value if set, zero value otherwise.
func (o *CharacterDTO) GetManageable() bool {
	if o == nil || IsNil(o.Manageable) {
		var ret bool
		return ret
	}
	return *o.Manageable
}

// GetManageableOk returns a tuple with the Manageable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetManageableOk() (*bool, bool) {
	if o == nil || IsNil(o.Manageable) {
		return nil, false
	}
	return o.Manageable, true
}

// HasManageable returns a boolean if a field has been set.
func (o *CharacterDTO) HasManageable() bool {
	if o != nil && !IsNil(o.Manageable) {
		return true
	}

	return false
}

// SetManageable gets a reference to the given bool and assigns it to the Manageable field.
func (o *CharacterDTO) SetManageable(v bool) {
	o.Manageable = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *CharacterDTO) GetCreator() string {
	if o == nil || IsNil(o.Creator) {
		var ret string
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetCreatorOk() (*string, bool) {
	if o == nil || IsNil(o.Creator) {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *CharacterDTO) HasCreator() bool {
	if o != nil && !IsNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given string and assigns it to the Creator field.
func (o *CharacterDTO) SetCreator(v string) {
	o.Creator = &v
}

// GetIsPreConfigured returns the IsPreConfigured field value if set, zero value otherwise.
func (o *CharacterDTO) GetIsPreConfigured() bool {
	if o == nil || IsNil(o.IsPreConfigured) {
		var ret bool
		return ret
	}
	return *o.IsPreConfigured
}

// GetIsPreConfiguredOk returns a tuple with the IsPreConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetIsPreConfiguredOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPreConfigured) {
		return nil, false
	}
	return o.IsPreConfigured, true
}

// HasIsPreConfigured returns a boolean if a field has been set.
func (o *CharacterDTO) HasIsPreConfigured() bool {
	if o != nil && !IsNil(o.IsPreConfigured) {
		return true
	}

	return false
}

// SetIsPreConfigured gets a reference to the given bool and assigns it to the IsPreConfigured field.
func (o *CharacterDTO) SetIsPreConfigured(v bool) {
	o.IsPreConfigured = &v
}

// GetExtractMemory returns the ExtractMemory field value if set, zero value otherwise.
func (o *CharacterDTO) GetExtractMemory() bool {
	if o == nil || IsNil(o.ExtractMemory) {
		var ret bool
		return ret
	}
	return *o.ExtractMemory
}

// GetExtractMemoryOk returns a tuple with the ExtractMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetExtractMemoryOk() (*bool, bool) {
	if o == nil || IsNil(o.ExtractMemory) {
		return nil, false
	}
	return o.ExtractMemory, true
}

// HasExtractMemory returns a boolean if a field has been set.
func (o *CharacterDTO) HasExtractMemory() bool {
	if o != nil && !IsNil(o.ExtractMemory) {
		return true
	}

	return false
}

// SetExtractMemory gets a reference to the given bool and assigns it to the ExtractMemory field.
func (o *CharacterDTO) SetExtractMemory(v bool) {
	o.ExtractMemory = &v
}

// GetExtractMoment returns the ExtractMoment field value if set, zero value otherwise.
func (o *CharacterDTO) GetExtractMoment() bool {
	if o == nil || IsNil(o.ExtractMoment) {
		var ret bool
		return ret
	}
	return *o.ExtractMoment
}

// GetExtractMomentOk returns a tuple with the ExtractMoment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterDTO) GetExtractMomentOk() (*bool, bool) {
	if o == nil || IsNil(o.ExtractMoment) {
		return nil, false
	}
	return o.ExtractMoment, true
}

// HasExtractMoment returns a boolean if a field has been set.
func (o *CharacterDTO) HasExtractMoment() bool {
	if o != nil && !IsNil(o.ExtractMoment) {
		return true
	}

	return false
}

// SetExtractMoment gets a reference to the given bool and assigns it to the ExtractMoment field.
func (o *CharacterDTO) SetExtractMoment(v bool) {
	o.ExtractMoment = &v
}

func (o *CharacterDTO) GetRoleTypes() []string {
	if o == nil || IsNil(o.RoleTypes) {
		var ret []string
		return ret
	}
	return o.RoleTypes
}

func (o *CharacterDTO) GetRoleTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.RoleTypes) {
		return nil, false
	}
	return o.RoleTypes, true
}

func (o *CharacterDTO) HasRoleTypes() bool {
	if o != nil && !IsNil(o.RoleTypes) {
		return true
	}

	return false
}

func (o *CharacterDTO) SetRoleTypes(v []string) {
	o.RoleTypes = v
}

func (o *CharacterDTO) GetAuditStatus() *string {
	if o == nil || IsNil(o.AuditStatus) {
		var ret *string
		return ret
	}
	return o.AuditStatus
}

func (o *CharacterDTO) GetAuditStatusOk() (*string, bool) {
	if o == nil || IsNil(o.AuditStatus) {
		return nil, false
	}
	return o.AuditStatus, true
}

func (o *CharacterDTO) HasAuditStatus() bool {
	if o != nil && !IsNil(o.AuditStatus) {
		return true
	}

	return false
}

func (o *CharacterDTO) SetAuditStatus(v *string) {
	o.AuditStatus = v
}

func (o *CharacterDTO) GetConfigStatus() *string {
	if o == nil || IsNil(o.ConfigStatus) {
		var ret *string
		return ret
	}
	return o.ConfigStatus
}

func (o *CharacterDTO) GetConfigStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigStatus) {
		return nil, false
	}
	return o.ConfigStatus, true
}

func (o *CharacterDTO) HasConfigStatus() bool {
	if o != nil && !IsNil(o.ConfigStatus) {
		return true
	}

	return false
}

func (o *CharacterDTO) SetConfigStatus(v *string) {
	o.ConfigStatus = v
}

func (o CharacterDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CharacterDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GatewayAddContent) {
		toSerialize["gatewayAddContent"] = o.GatewayAddContent
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Avatar) {
		toSerialize["avatar"] = o.Avatar
	}
	toSerialize["introduction"] = o.Introduction
	toSerialize["basicInformation"] = o.BasicInformation
	toSerialize["openingLine"] = o.OpeningLine
	if !IsNil(o.Traits) {
		toSerialize["traits"] = o.Traits
	}
	if !IsNil(o.ChatExample) {
		toSerialize["chatExample"] = o.ChatExample
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.ChatObjective) {
		toSerialize["chatObjective"] = o.ChatObjective
	}
	if !IsNil(o.AdvancedConfig) {
		toSerialize["advancedConfig"] = o.AdvancedConfig
	}
	if !IsNil(o.CharacterId) {
		toSerialize["characterId"] = o.CharacterId
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.MajorVersion) {
		toSerialize["majorVersion"] = o.MajorVersion
	}
	if !IsNil(o.GmtCreate) {
		toSerialize["gmtCreate"] = o.GmtCreate
	}
	if !IsNil(o.GmtModified) {
		toSerialize["gmtModified"] = o.GmtModified
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.ModifiedBy) {
		toSerialize["modifiedBy"] = o.ModifiedBy
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Bubbles) {
		toSerialize["bubbles"] = o.Bubbles
	}
	if !IsNil(o.BackgroundImgUrl) {
		toSerialize["backgroundImgUrl"] = o.BackgroundImgUrl
	}
	if !IsNil(o.PermConfig) {
		toSerialize["permConfig"] = o.PermConfig
	}
	if !IsNil(o.Versions) {
		toSerialize["versions"] = o.Versions
	}
	if !IsNil(o.Manageable) {
		toSerialize["manageable"] = o.Manageable
	}
	if !IsNil(o.Creator) {
		toSerialize["creator"] = o.Creator
	}
	if !IsNil(o.IsPreConfigured) {
		toSerialize["isPreConfigured"] = o.IsPreConfigured
	}
	if !IsNil(o.ExtractMemory) {
		toSerialize["extractMemory"] = o.ExtractMemory
	}
	if !IsNil(o.ExtractMoment) {
		toSerialize["extractMoment"] = o.ExtractMoment
	}
	if !IsNil(o.RoleTypes) {
		toSerialize["roleTypes"] = o.RoleTypes
	}
	if !IsNil(o.AuditStatus) {
		toSerialize["auditStatus"] = o.AuditStatus
	}
	if !IsNil(o.ConfigStatus) {
		toSerialize["configStatus"] = o.ConfigStatus
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CharacterDTO) UnmarshalJSON(bytes []byte) (err error) {
	varCharacterDTO := _CharacterDTO{}

	err = json.Unmarshal(bytes, &varCharacterDTO)

	if err != nil {
		return err
	}

	*o = CharacterDTO(varCharacterDTO)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "gatewayAddContent")
		delete(additionalProperties, "name")
		delete(additionalProperties, "avatar")
		delete(additionalProperties, "introduction")
		delete(additionalProperties, "basicInformation")
		delete(additionalProperties, "openingLine")
		delete(additionalProperties, "traits")
		delete(additionalProperties, "chatExample")
		delete(additionalProperties, "type")
		delete(additionalProperties, "chatObjective")
		delete(additionalProperties, "advancedConfig")
		delete(additionalProperties, "characterId")
		delete(additionalProperties, "version")
		delete(additionalProperties, "majorVersion")
		delete(additionalProperties, "gmtCreate")
		delete(additionalProperties, "gmtModified")
		delete(additionalProperties, "userId")
		delete(additionalProperties, "modifiedBy")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "bubbles")
		delete(additionalProperties, "backgroundImgUrl")
		delete(additionalProperties, "permConfig")
		delete(additionalProperties, "versions")
		delete(additionalProperties, "manageable")
		delete(additionalProperties, "creator")
		delete(additionalProperties, "isPreConfigured")
		delete(additionalProperties, "extractMemory")
		delete(additionalProperties, "extractMoment")
		delete(additionalProperties, "roleTypes")
		delete(additionalProperties, "auditStatus")
		delete(additionalProperties, "configStatus")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCharacterDTO struct {
	value *CharacterDTO
	isSet bool
}

func (v NullableCharacterDTO) Get() *CharacterDTO {
	return v.value
}

func (v *NullableCharacterDTO) Set(val *CharacterDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCharacterDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCharacterDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCharacterDTO(val *CharacterDTO) *NullableCharacterDTO {
	return &NullableCharacterDTO{value: val, isSet: true}
}

func (v NullableCharacterDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCharacterDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
