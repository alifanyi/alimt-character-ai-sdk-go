/*
XingChen 开放接口定义

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xingchen

import (
	"encoding/json"
)

// checks if the ChatHistoryQueryWhere type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatHistoryQueryWhere{}

// ChatHistoryQueryWhere 查询条件
type ChatHistoryQueryWhere struct {
	// 角色ID
	CharacterId *string `json:"characterId,omitempty"`
	// 聊天室ID
	ChatRoomId *int64 `json:"chatRoomId,omitempty"`
	// 会话ID
	SessionId *string `json:"sessionId,omitempty"`
	// 开始时间
	StartTime *int64 `json:"startTime,omitempty"`
	// 结束时间
	EndTime *int64 `json:"endTime,omitempty"`
	// 消息ID列表
	MessageIds []string `json:"messageIds,omitempty"`
	// 对话用户，给PASS接口用
	BizUserId            *string `json:"bizUserId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ChatHistoryQueryWhere ChatHistoryQueryWhere

// NewChatHistoryQueryWhere instantiates a new ChatHistoryQueryWhere object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatHistoryQueryWhere() *ChatHistoryQueryWhere {
	this := ChatHistoryQueryWhere{}
	return &this
}

// NewChatHistoryQueryWhereWithDefaults instantiates a new ChatHistoryQueryWhere object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatHistoryQueryWhereWithDefaults() *ChatHistoryQueryWhere {
	this := ChatHistoryQueryWhere{}
	return &this
}

// GetCharacterId returns the CharacterId field value if set, zero value otherwise.
func (o *ChatHistoryQueryWhere) GetCharacterId() string {
	if o == nil || IsNil(o.CharacterId) {
		var ret string
		return ret
	}
	return *o.CharacterId
}

// GetCharacterIdOk returns a tuple with the CharacterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatHistoryQueryWhere) GetCharacterIdOk() (*string, bool) {
	if o == nil || IsNil(o.CharacterId) {
		return nil, false
	}
	return o.CharacterId, true
}

// HasCharacterId returns a boolean if a field has been set.
func (o *ChatHistoryQueryWhere) HasCharacterId() bool {
	if o != nil && !IsNil(o.CharacterId) {
		return true
	}

	return false
}

// SetCharacterId gets a reference to the given string and assigns it to the CharacterId field.
func (o *ChatHistoryQueryWhere) SetCharacterId(v string) {
	o.CharacterId = &v
}

// GetChatRoomId returns the ChatRoomId field value if set, zero value otherwise.
func (o *ChatHistoryQueryWhere) GetChatRoomId() int64 {
	if o == nil || IsNil(o.ChatRoomId) {
		var ret int64
		return ret
	}
	return *o.ChatRoomId
}

// GetChatRoomIdOk returns a tuple with the ChatRoomId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatHistoryQueryWhere) GetChatRoomIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ChatRoomId) {
		return nil, false
	}
	return o.ChatRoomId, true
}

// HasChatRoomId returns a boolean if a field has been set.
func (o *ChatHistoryQueryWhere) HasChatRoomId() bool {
	if o != nil && !IsNil(o.ChatRoomId) {
		return true
	}

	return false
}

// SetChatRoomId gets a reference to the given int64 and assigns it to the ChatRoomId field.
func (o *ChatHistoryQueryWhere) SetChatRoomId(v int64) {
	o.ChatRoomId = &v
}

// GetSessionId returns the SessionId field value if set, zero value otherwise.
func (o *ChatHistoryQueryWhere) GetSessionId() string {
	if o == nil || IsNil(o.SessionId) {
		var ret string
		return ret
	}
	return *o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatHistoryQueryWhere) GetSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.SessionId) {
		return nil, false
	}
	return o.SessionId, true
}

// HasSessionId returns a boolean if a field has been set.
func (o *ChatHistoryQueryWhere) HasSessionId() bool {
	if o != nil && !IsNil(o.SessionId) {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given string and assigns it to the SessionId field.
func (o *ChatHistoryQueryWhere) SetSessionId(v string) {
	o.SessionId = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *ChatHistoryQueryWhere) GetStartTime() int64 {
	if o == nil || IsNil(o.StartTime) {
		var ret int64
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatHistoryQueryWhere) GetStartTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *ChatHistoryQueryWhere) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int64 and assigns it to the StartTime field.
func (o *ChatHistoryQueryWhere) SetStartTime(v int64) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *ChatHistoryQueryWhere) GetEndTime() int64 {
	if o == nil || IsNil(o.EndTime) {
		var ret int64
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatHistoryQueryWhere) GetEndTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *ChatHistoryQueryWhere) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given int64 and assigns it to the EndTime field.
func (o *ChatHistoryQueryWhere) SetEndTime(v int64) {
	o.EndTime = &v
}

// GetMessageIds returns the MessageIds field value if set, zero value otherwise.
func (o *ChatHistoryQueryWhere) GetMessageIds() []string {
	if o == nil || IsNil(o.MessageIds) {
		var ret []string
		return ret
	}
	return o.MessageIds
}

// GetMessageIdsOk returns a tuple with the MessageIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatHistoryQueryWhere) GetMessageIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.MessageIds) {
		return nil, false
	}
	return o.MessageIds, true
}

// HasMessageIds returns a boolean if a field has been set.
func (o *ChatHistoryQueryWhere) HasMessageIds() bool {
	if o != nil && !IsNil(o.MessageIds) {
		return true
	}

	return false
}

// SetMessageIds gets a reference to the given []string and assigns it to the MessageIds field.
func (o *ChatHistoryQueryWhere) SetMessageIds(v []string) {
	o.MessageIds = v
}

// GetBizUserId returns the BizUserId field value if set, zero value otherwise.
func (o *ChatHistoryQueryWhere) GetBizUserId() string {
	if o == nil || IsNil(o.BizUserId) {
		var ret string
		return ret
	}
	return *o.BizUserId
}

// GetBizUserIdOk returns a tuple with the BizUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatHistoryQueryWhere) GetBizUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.BizUserId) {
		return nil, false
	}
	return o.BizUserId, true
}

// HasBizUserId returns a boolean if a field has been set.
func (o *ChatHistoryQueryWhere) HasBizUserId() bool {
	if o != nil && !IsNil(o.BizUserId) {
		return true
	}

	return false
}

// SetBizUserId gets a reference to the given string and assigns it to the BizUserId field.
func (o *ChatHistoryQueryWhere) SetBizUserId(v string) {
	o.BizUserId = &v
}

func (o ChatHistoryQueryWhere) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatHistoryQueryWhere) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CharacterId) {
		toSerialize["characterId"] = o.CharacterId
	}
	if !IsNil(o.ChatRoomId) {
		toSerialize["chatRoomId"] = o.ChatRoomId
	}
	if !IsNil(o.SessionId) {
		toSerialize["sessionId"] = o.SessionId
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !IsNil(o.MessageIds) {
		toSerialize["messageIds"] = o.MessageIds
	}
	if !IsNil(o.BizUserId) {
		toSerialize["bizUserId"] = o.BizUserId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ChatHistoryQueryWhere) UnmarshalJSON(bytes []byte) (err error) {
	varChatHistoryQueryWhere := _ChatHistoryQueryWhere{}

	err = json.Unmarshal(bytes, &varChatHistoryQueryWhere)

	if err != nil {
		return err
	}

	*o = ChatHistoryQueryWhere(varChatHistoryQueryWhere)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "characterId")
		delete(additionalProperties, "chatRoomId")
		delete(additionalProperties, "sessionId")
		delete(additionalProperties, "startTime")
		delete(additionalProperties, "endTime")
		delete(additionalProperties, "messageIds")
		delete(additionalProperties, "bizUserId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChatHistoryQueryWhere struct {
	value *ChatHistoryQueryWhere
	isSet bool
}

func (v NullableChatHistoryQueryWhere) Get() *ChatHistoryQueryWhere {
	return v.value
}

func (v *NullableChatHistoryQueryWhere) Set(val *ChatHistoryQueryWhere) {
	v.value = val
	v.isSet = true
}

func (v NullableChatHistoryQueryWhere) IsSet() bool {
	return v.isSet
}

func (v *NullableChatHistoryQueryWhere) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatHistoryQueryWhere(val *ChatHistoryQueryWhere) *NullableChatHistoryQueryWhere {
	return &NullableChatHistoryQueryWhere{value: val, isSet: true}
}

func (v NullableChatHistoryQueryWhere) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatHistoryQueryWhere) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
